const axios = require('axios'); // import axios
const https = require('https');

const httpsAgent = new https.Agent({
  rejectUnauthorized: false // Bypass SSL verification
});

// first make sure you have set permision in proxmox (use video)
// Use the ticket and CSRF token obtained from the API (use video)
// this ticket  generated by the responde using postman, this also  might expire at some point (use video)
const ticket = 'PVE:API@pve:6626B5CC::APfRIbr44dbuYhfbK/tS0Guo9WDYmmlZpv3SB0v7cmR8/zs0IH0EkkZfO/gkU67EB0MASzC+9a/YdtB1pTSSkxy+TO90dxgrqhtoV4CCYapfTAIaYBxMd191c5PXt/f+bEY5/f9CnROxiYHILl+XjjKwRTKYksB9Xw/TNClhActoIX0f9ydWpyArKLC9W+3Zkg6QHDh4TG7dnPp3DvaeZ0gHeV2qbTBX/Qm7VzH2ithlN7YUHHGkhlaYov6yT3BFEl3L79AEJwla2/uhTx9ZpUC67CKo9KTIqeDo1vrNlxycnfIFgzwfJjtX/ph2Cj5w9Iok5dH335Stw5gb3RqUww=='; // Replace with the full ticket from the response
const csrfToken = '6626B5CC:Uv2b1I9iTgY+yqxUM1fpZNo5atuLcu0SwoXyPcM9MGA'; // Replace with the CSRF token from the response using postman (use the video)

const host = 'https://localhost:8006'; // Your Proxmox server address
const nodeId = 'pve'; // Node name where the VM is hosted
const vmId = 100; // VM ID that you want to start

// Set up the cookie in the header to use the ticket
const cookie = `PVEAuthCookie=${encodeURIComponent(ticket)}`; // this thing is so stupid, encode the ticket 

// endpoint to start vm in proxmox, reference the resource tree on proxmox documentation to create more endpoint such as stop, current, reboot, reset, resume, shutdown....
axios.post(`${host}/api2/json/nodes/${nodeId}/qemu/${vmId}/snapshot`, {
    snapname: backup,
    vmstate: 1, 
    description: 'backup snapshot',
}, {
  headers: {
    'CSRFPreventionToken': csrfToken,
    'Cookie': cookie,
  },
})

console.log(`Backup snapshot '${backupName}' created successfully for virtual machine ${vmId}.`);

// Get backup file
const backupResponse = await axios.get(`${host}/api2/json/nodes/${nodeID}/qemu/${vmId}/snapshot/${backupName}/config`, {
headers: {
'CSRFPreventionToken': token,
'Cookie': `PVEAuthCookie=${loginResponse.data.data.ticket}`,
},
httpsAgent
})
.then(response => {
    const backupFileUrl = backupResponse.data.data.snap;
  console.log('VM saved Succesfully:', response.data);
})
.catch(error => {
  console.error('Error saving VM:', error);
});
// needs to be changed later when we have the database functional
return backupFileUrl;









